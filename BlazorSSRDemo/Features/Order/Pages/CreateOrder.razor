@page "/order/create"
@attribute [StreamRendering]
@inject IFoodRepository foodData
@inject IOrderRepository orderData
@inject NavigationManager navMan

<PageTitle>Create Order - BlazorSSR</PageTitle>

<h1>Create Order</h1>

<EditForm Enhance FormName="createOrder" Model="Order" OnValidSubmit="() => HandleValidSubmit()">
    <DataAnnotationsValidator />
    <ValidationSummary Model="Order" />

    <div class="form-group mb-3">
        <label class="control-label">Item to Order</label>
        <InputSelect @bind-Value="Order.FoodId" class="form-control">
            <option value="">Select a meal...</option>
            @foreach (var f in foodItems)
            {
                <option value="@f.Id">@f.Title</option>
            }
        </InputSelect>
    </div>

    <div class="form-group mb-3">
        <label class="control-label">Quantity</label>
        <InputNumber @bind-Value="Order.Quantity" class="form-control" />
        <ValidationMessage For="@(() => Order.Quantity)" class="text-danger" />
    </div>

    <div class="form-group mb-3">
        <label class="control-label">Name for the Order</label>
        <InputText @bind-Value="Order.OrderName" class="form-control" />
        <ValidationMessage For="@(() => Order.OrderName)" class="text-danger" />
    </div>

    <div class="form-group">
        <input type="submit" value="Order Food" class="btn btn-primary" />
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm]
    public OrderModel Order { get; set; } = new();

    private IEnumerable<FoodModel> foodItems = [];

    protected override async Task OnInitializedAsync()
    {
        foodItems = await foodData.GetFoodAsync();
    }

    private async Task HandleValidSubmit()
    {
        Order.OrderDate = DateTime.UtcNow;
        Order.Total = Order.Quantity * foodItems.Where(x => x.Id == Order.FoodId).First().Price;
        int id = await orderData.CreateOrderAsync(Order);
        navMan.NavigateTo($"order/display/{id}");
    }
}
