@page "/order/create"
@inject HttpClient Http
@inject NavigationManager navMan

<PageTitle>Create Order - Blazor Client</PageTitle>

<h3>Create</h3>

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <h4>System Error</h4>
    <p>@errorString</p>
}
else if (foodItems?.Count == 0)
{
    <h4>Loading...</h4>
}
else
{
    <EditForm Model="@order" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary Model="@order" />
        <div class="form-group">
            <label class="control-label">Item to Order</label>
            @*<InputSelect @bind-Value="order.FoodId" class="form-control">
                    @foreach (var f in foodItems)
                    {
                        <option value="f.Id">@f.Title</option>
                    }
                </InputSelect>*@
            <select @onchange="FoodItemChange" class="form-control">
                <option value="">Select a meal...</option>
                @foreach (var f in foodItems!)
                {
                    <option value="@f.Id">@f.Title</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label class="control-label">Quantity</label>
            <InputNumber @bind-Value="order.Quantity" class="form-control" />
            <ValidationMessage For="@(() => order.Quantity)" class="text-danger" />
        </div>
        <div class="form-group">
            <label class="control-label">Name for the Order</label>
            <InputText @bind-Value="order.OrderName" class="form-control" />
            <ValidationMessage For="@(() => order.OrderName)" class="text-danger" />
        </div>
        <div class="form-group">
            <input type="submit" value="Order Food" class="btn btn-primary" />
        </div>
    </EditForm>
}

@code {
    private OrderModel order = new();
    private List<FoodModel>? foodItems = new();
    private string? errorString;

    protected override async Task OnParametersSetAsync()
    {
        HttpResponseMessage response = await Http.GetAsync("api/food");

        if (response.IsSuccessStatusCode)
        {
            foodItems = await response.Content.ReadFromJsonAsync<List<FoodModel>>();
        }
        else
        {
            errorString = response.ReasonPhrase;
        }

        await base.OnParametersSetAsync();
    }

    private void FoodItemChange(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value?.ToString()) == false)
        {
            order.FoodId = int.Parse(e.Value.ToString()!);
        }
        else
        {
            order.FoodId = 0;
        }
    }

    private async Task HandleValidSubmit()
    {
        order.Total = order.Quantity * foodItems!.Where(x => x.Id == order.FoodId).First().Price;

        try
        {
            var response = await Http.PostAsJsonAsync("api/order", order);
            var contents = await response.Content.ReadFromJsonAsync<OrderCreateResultsModel>();

            order = new OrderModel();
            //navMan.NavigateTo($"order/display/{contents.Id}");
        }
        catch (Exception e)
        {

            errorString = e.Message;
        }
    }
}